import { ValidSudoku } from '../0036-valid-sudoku'

describe('ValidSudoku', () => {
  const validSudoku = new ValidSudoku()
  it('sub 3x3 index', () => {
    const result = []
    for (let i = 0; i < 9; i++) {
      if (result[i] === undefined) {
        result[i] = []
      }
      for (let j = 0; j < 9; j++) {
        result[i].push(
          `${3 * Math.floor(i / 3) + Math.floor(j / 3)} - ${
            3 * (i % 3) + (j % 3)
          }`
        )
      }
    }
    expect(result).toEqual([
      [
        '0 - 0',
        '0 - 1',
        '0 - 2',
        '1 - 0',
        '1 - 1',
        '1 - 2',
        '2 - 0',
        '2 - 1',
        '2 - 2',
      ],
      [
        '0 - 3',
        '0 - 4',
        '0 - 5',
        '1 - 3',
        '1 - 4',
        '1 - 5',
        '2 - 3',
        '2 - 4',
        '2 - 5',
      ],
      [
        '0 - 6',
        '0 - 7',
        '0 - 8',
        '1 - 6',
        '1 - 7',
        '1 - 8',
        '2 - 6',
        '2 - 7',
        '2 - 8',
      ],
      [
        '3 - 0',
        '3 - 1',
        '3 - 2',
        '4 - 0',
        '4 - 1',
        '4 - 2',
        '5 - 0',
        '5 - 1',
        '5 - 2',
      ],
      [
        '3 - 3',
        '3 - 4',
        '3 - 5',
        '4 - 3',
        '4 - 4',
        '4 - 5',
        '5 - 3',
        '5 - 4',
        '5 - 5',
      ],
      [
        '3 - 6',
        '3 - 7',
        '3 - 8',
        '4 - 6',
        '4 - 7',
        '4 - 8',
        '5 - 6',
        '5 - 7',
        '5 - 8',
      ],
      [
        '6 - 0',
        '6 - 1',
        '6 - 2',
        '7 - 0',
        '7 - 1',
        '7 - 2',
        '8 - 0',
        '8 - 1',
        '8 - 2',
      ],
      [
        '6 - 3',
        '6 - 4',
        '6 - 5',
        '7 - 3',
        '7 - 4',
        '7 - 5',
        '8 - 3',
        '8 - 4',
        '8 - 5',
      ],
      [
        '6 - 6',
        '6 - 7',
        '6 - 8',
        '7 - 6',
        '7 - 7',
        '7 - 8',
        '8 - 6',
        '8 - 7',
        '8 - 8',
      ],
    ])
  })

  it('ValidSudoku should work properly', () => {
    expect(
      validSudoku.firstSolution([
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
      ])
    ).toBe(true)

    expect(
      validSudoku.firstSolution([
        ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
      ])
    ).toBe(false)
  })
})
